/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IERC404Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "decimals"
      | "erc20Approve"
      | "erc20BalanceOf"
      | "erc20TotalSupply"
      | "erc20TransferFrom"
      | "erc721Approve"
      | "erc721BalanceOf"
      | "erc721TotalSupply"
      | "erc721TransferExempt"
      | "erc721TransferFrom"
      | "getERC721QueueLength"
      | "getERC721TokensInQueue"
      | "isApprovedForAll"
      | "name"
      | "owned"
      | "ownerOf"
      | "permit"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setSelfERC721TransferExempt"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "erc20Approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20BalanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20TotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20TransferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721Approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721BalanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721TotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc721TransferExempt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721TransferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getERC721QueueLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getERC721TokensInQueue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owned", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSelfERC721TransferExempt",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc20Approve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20BalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20TotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20TransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721Approve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721BalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721TotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721TransferExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721TransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC721QueueLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC721TokensInQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSelfERC721TransferExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export interface IERC404 extends BaseContract {
  connect(runner?: ContractRunner | null): IERC404;
  waitForDeployment(): Promise<this>;

  interface: IERC404Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner_: AddressLike, spender_: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender_: AddressLike, valueOrId_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner_: AddressLike], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  erc20Approve: TypedContractMethod<
    [spender_: AddressLike, value_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  erc20BalanceOf: TypedContractMethod<[owner_: AddressLike], [bigint], "view">;

  erc20TotalSupply: TypedContractMethod<[], [bigint], "view">;

  erc20TransferFrom: TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, value_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  erc721Approve: TypedContractMethod<
    [spender_: AddressLike, id_: BigNumberish],
    [void],
    "nonpayable"
  >;

  erc721BalanceOf: TypedContractMethod<[owner_: AddressLike], [bigint], "view">;

  erc721TotalSupply: TypedContractMethod<[], [bigint], "view">;

  erc721TransferExempt: TypedContractMethod<
    [account_: AddressLike],
    [boolean],
    "view"
  >;

  erc721TransferFrom: TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, id_: BigNumberish],
    [void],
    "nonpayable"
  >;

  getERC721QueueLength: TypedContractMethod<[], [bigint], "view">;

  getERC721TokensInQueue: TypedContractMethod<
    [start_: BigNumberish, count_: BigNumberish],
    [bigint[]],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner_: AddressLike, operator_: AddressLike],
    [boolean],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owned: TypedContractMethod<[owner_: AddressLike], [bigint[]], "view">;

  ownerOf: TypedContractMethod<[id_: BigNumberish], [string], "view">;

  permit: TypedContractMethod<
    [
      owner_: AddressLike,
      spender_: AddressLike,
      value_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, id_: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, id_: BigNumberish, data_: BytesLike],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator_: AddressLike, approved_: boolean],
    [void],
    "nonpayable"
  >;

  setSelfERC721TransferExempt: TypedContractMethod<
    [state_: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[id_: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to_: AddressLike, amount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, valueOrId_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner_: AddressLike, spender_: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender_: AddressLike, valueOrId_: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc20Approve"
  ): TypedContractMethod<
    [spender_: AddressLike, value_: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "erc20BalanceOf"
  ): TypedContractMethod<[owner_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc20TotalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc20TransferFrom"
  ): TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, value_: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "erc721Approve"
  ): TypedContractMethod<
    [spender_: AddressLike, id_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "erc721BalanceOf"
  ): TypedContractMethod<[owner_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc721TotalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc721TransferExempt"
  ): TypedContractMethod<[account_: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "erc721TransferFrom"
  ): TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, id_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getERC721QueueLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getERC721TokensInQueue"
  ): TypedContractMethod<
    [start_: BigNumberish, count_: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner_: AddressLike, operator_: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owned"
  ): TypedContractMethod<[owner_: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[id_: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner_: AddressLike,
      spender_: AddressLike,
      value_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, id_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, id_: BigNumberish, data_: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator_: AddressLike, approved_: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSelfERC721TransferExempt"
  ): TypedContractMethod<[state_: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[id_: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to_: AddressLike, amount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, valueOrId_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  filters: {};
}
